// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using EES.Infrastructure.Entities;
using EES.Infrastructure.Enums;
using System;
using System.Collections.Generic;

namespace EES.Modules.Ums.Entities
{
    /// <summary>
    /// 系统参数信息
    /// </summary>
    public partial class SystemParam : EntityBase
    {
        /// <summary>
        /// 
        /// </summary>
        protected SystemParam() { }

       /// <summary>
       /// 
       /// </summary>
       /// <param name="module"></param>
       /// <param name="isEnable"></param>
       /// <param name="code"></param>
       /// <param name="name"></param>
       /// <param name="description"></param>
       /// <param name="defalutValue"></param>
       /// <param name="setValue"></param>
       /// <param name="remark"></param>
       /// <param name="createUserId"></param>
       /// <param name="createUserName"></param>
       public SystemParam(SystemModule module, bool isEnable, string code, string name, string description,string defalutValue, string setValue, string remark, long createUserId, string createUserName) : base(createUserId, createUserName)
        {
            Module = module;
            IsEnable = isEnable;
            Code = string.IsNullOrEmpty(code) ? string.Empty : code;
            Name = string.IsNullOrEmpty(name) ? string.Empty : name;
            Description = string.IsNullOrEmpty(description) ? string.Empty : description;
            DefalutValue = string.IsNullOrEmpty(defalutValue) ? string.Empty : defalutValue;
            SetValue = string.IsNullOrEmpty(setValue) ? string.Empty : setValue;
            BeforeValue = string.Empty;
            Remark = string.IsNullOrEmpty(remark) ? string.Empty : remark;
        }

        /// <summary>
        /// 参数类型
        /// </summary>
        public SystemModule Module { get; private set; }
        /// <summary>
        /// 是否启用
        /// </summary>
        public bool IsEnable { get; private set; }
        /// <summary>
        /// 参数编码
        /// </summary>
        public string Code { get; private set; }
        /// <summary>
        /// 名称
        /// </summary>
        public string Name { get; private set; }
        /// <summary>
        /// 描述
        /// </summary>
        public string Description { get; private set; }

        /// <summary>
        /// 默认值
        /// </summary>
        public string DefalutValue { get; private set; }
        /// <summary>
        /// 设定值
        /// </summary>
        public string SetValue { get; private set; }
        /// <summary>
        /// 修改前的值
        /// </summary>
        public string BeforeValue { get; private set; }
        /// <summary>
        /// 备注
        /// </summary>
        public string Remark { get; private set; }


        /// <summary>
        /// 
        /// </summary>
        /// <param name="module"></param>
        /// <param name="isEnable"></param>
        /// <param name="code"></param>
        /// <param name="name"></param>
        /// <param name="description"></param>
        /// <param name="defalutValue"></param>
        /// <param name="setValue"></param>
        /// <param name="remark"></param>
        /// <param name="updateUserId"></param>
        /// <param name="updateUserName"></param>
        public void Modify(SystemModule module, bool isEnable, string code, string name, string description, string defalutValue, string setValue, string remark, long updateUserId, string updateUserName)
        {

            Module = module;
            IsEnable = isEnable;
            Code = string.IsNullOrEmpty(code) ? string.Empty : code;
            Name = string.IsNullOrEmpty(name) ? string.Empty : name;
            Description = string.IsNullOrEmpty(description) ? string.Empty : description;
            DefalutValue = string.IsNullOrEmpty(defalutValue) ? string.Empty : defalutValue;          
            BeforeValue = string.IsNullOrEmpty(SetValue) ? string.Empty : SetValue;
            SetValue = string.IsNullOrEmpty(setValue) ? string.Empty : setValue;
            Remark = string.IsNullOrEmpty(remark) ? string.Empty : remark;

            UpdateRecord(updateUserId, updateUserName);
        }
    }
}