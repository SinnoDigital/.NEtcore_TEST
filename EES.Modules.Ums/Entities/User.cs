// <auto-generated> This file has been auto generated by EF Core Power Tools. </auto-generated>
#nullable disable
using EES.Infrastructure.Entities;
using EES.Infrastructure.Enums;
using EES.Modules.Share.Events;
using System;
using System.Collections.Generic;
using System.Security.Principal;
using static System.Net.WebRequestMethods;

namespace EES.Modules.Ums.Entities
{
    /// <summary>
    /// 用户信息
    /// </summary>
    public partial class User : EntityBase
    {

        /// <summary>
        /// 构造函数
        /// <see cref="https://learn.microsoft.com/zh-cn/ef/core/modeling/constructors"/>
        /// </summary>
        protected User() { }

        /// <summary>
        /// 构造函数
        /// </summary>
        /// <param name="account">登录账号</param>
        /// <param name="password">登录密码</param>
        /// <param name="name">姓名</param>
        /// <param name="mail">邮箱</param>
        /// <param name="phone">联系电话</param>
        /// <param name="remark">备注</param>
        /// <param name="imageUrl">头像</param>
        /// <param name="signatureUrl">签名</param>
        /// <param name="departmenId">部门Id</param>
        /// <param name="createUserId">创建者id</param>
        /// <param name="createUserName">创建者名称</param>
        /// <param name="language">默认语言</param>
        public User(string account, string password, string name,string mail, string phone,string remark, string imageUrl, string signatureUrl,long departmenId, long createUserId, string createUserName, Language language = Language.简体中文) : base(createUserId, createUserName)
        {
            Account = string.IsNullOrEmpty(account) ? string.Empty : account;
            Password = string.IsNullOrEmpty(password) ? string.Empty : password;
            Name = string.IsNullOrEmpty(name) ? string.Empty : name;
            Mail = string.IsNullOrEmpty(mail) ? string.Empty : mail;
            Phone = string.IsNullOrEmpty(phone) ? string.Empty : phone;
            Remark = string.IsNullOrEmpty(remark) ? string.Empty : remark;
            ImageUrl = string.IsNullOrEmpty(imageUrl) ? string.Empty : imageUrl;
            SignatureUrl = string.IsNullOrEmpty(signatureUrl) ? string.Empty : signatureUrl;
            DepartmenId = departmenId;
            State = UserState.启用;
            Language = language;

            GeneratePassword(password);
        }

        /// <summary>
        /// 用户账户
        /// </summary>
        public string Account { get; private set; }
        /// <summary>
        /// 用户密码密文
        /// </summary>
        public string Password { get; private set; }
        /// <summary>
        /// 密码盐
        /// </summary>
        public string Salt { get; private set; }
        /// <summary>
        /// 用户名称
        /// </summary>
        public string Name { get; private set; }
        /// <summary>
        /// 用户邮箱
        /// </summary>
        public string Mail { get; private set; }
        /// <summary>
        /// 用户电话
        /// </summary>
        public string Phone { get; private set; }

        /// <summary>
        /// 备注
        /// </summary>
        public string Remark { get; private set; }
        /// <summary>
        /// 用户照片的url
        /// </summary>
        public string ImageUrl { get; private set; }

        /// <summary>
        /// 签名url
        /// </summary>
        public string SignatureUrl { get; private set; }

        /// <summary>
        /// 部门ID
        /// </summary>
        public long DepartmenId { get; private set; }
        /// <summary>
        /// 用户状态
        /// </summary>
        public UserState State { get; private set; }

        /// <summary>
        /// 用户系统语言标识
        /// </summary>
        public Language Language { get; private set; }

        /// <summary>
        /// 所属部门
        /// </summary>
        public virtual Department Department { get; private set; }

        /// <summary>
        /// 用户角色集合
        /// </summary>
        public virtual IList<Role> Roles { get; private set; }


        /// <summary>
        /// 随机生成盐
        /// </summary>
        private void GenerateSalt()
        {
            Salt = Guid.NewGuid().ToString("N").ToLower();
        }

        /// <summary>
        /// 密码混淆
        /// </summary>
        /// <param name="userPassword">用户密码的32位MD5加密的密文</param>
        private void GeneratePassword(string userPassword)
        {
            GenerateSalt();

            Password = MixPassword(userPassword);
        }

        /// <summary>
        /// 混淆密码，得到加盐密文
        /// </summary>
        /// <param name="userPassword"></param>
        /// <returns></returns>
        private string MixPassword(string userPassword)
        {
            var front = Salt[0..10];

            var backend = Salt[10..];

            return (front + userPassword.ToLower() + backend).Md5().ToLower();
        }

        /// <summary>
        /// 校验密码是否正确
        /// </summary>
        /// <param name="userPassword"></param>
        /// <returns></returns>
        public bool VerifyPassword(string userPassword)
        {
            var mixPassword = MixPassword(userPassword);

            return Password == mixPassword;
        }

        /// <summary>
        /// 修改密码
        /// </summary>
        /// <param name="newPassword"></param>
        public void ModifyPassword(string newPassword)
        {
            GeneratePassword(newPassword);

            UpdateRecord(Id, Name);
        }

        /// <summary>
        /// 修改用户基础信息
        /// </summary>
        /// <param name="name">昵称</param>
        /// <param name="mail">邮箱</param>
        /// <param name="phone">电话</param>
        /// <param name="remark">备注</param>
        /// <param name="imageUrl">图像</param>
        /// <param name="signatureUrl">签名</param>
        /// <param name="departmenId">部门id</param>
        /// <param name="language">语言</param>
        /// <param name="state">员工状态</param>
        /// <param name="updateUserId">修改者id</param>
        /// <param name="updateUserName">修改者名称</param>
        public void ModifyBaseInfo(string name, string mail, string phone, string remark, string imageUrl, string signatureUrl,long departmenId, Language language, UserState state, long updateUserId, string updateUserName)
        {
            Name = string.IsNullOrEmpty(name) ? string.Empty : name;
            Mail = string.IsNullOrEmpty(mail) ? string.Empty : mail;
            Phone = string.IsNullOrEmpty(phone) ? string.Empty : phone;
            Remark = string.IsNullOrEmpty(remark) ? string.Empty : remark;
            ImageUrl = string.IsNullOrEmpty(imageUrl) ? string.Empty : imageUrl;
            SignatureUrl = string.IsNullOrEmpty(signatureUrl) ? string.Empty : signatureUrl;
            DepartmenId = departmenId;
            State = state;
            Language = language;

            UpdateRecord(updateUserId, updateUserName);

            if (state == UserState.禁用)
            {
                AccountDisabledEvent @event = new(Id);

                AddDomainEvent(@event);
            }

        }


        /// <summary>
        /// 账号是否是可使用的
        /// </summary>
        /// <returns></returns>
        public bool IsAvailable()
        {
            return State == UserState.启用;
        }

        /// <summary>
        /// 重置密码
        /// </summary>
        /// <param name="newPassword"></param>
        /// <param name="updateUserId"></param>
        /// <param name="UpdateUserName"></param>
        public void ResetPassword(string newPassword, long updateUserId, string UpdateUserName)
        {
            GeneratePassword(newPassword);

            UpdateRecord(updateUserId, UpdateUserName);
        }
    }
}